# Production-fix: Based on official Marp-CLI Docker configuration
# Optimized for Windows rendering compatibility

# Build stage
FROM node:22.15.0-bookworm-slim AS builder

# Build dependencies for bcrypt and native modules
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3 \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /usr/share/man/* /usr/share/doc/* /var/cache/apt/*

WORKDIR /app

# Copy package files for layer caching optimization
COPY package*.json ./
RUN npm ci --no-audit --no-fund

# Generate Prisma client
COPY prisma ./prisma/
RUN npx prisma generate

# Copy source code
COPY .env.docker ./.env
COPY . .

# Build application with environment variables
RUN set -a && \
    . ./.env && \
    set +a && \
    npm run build

# Production stage - Based on official Marp-CLI configuration
FROM node:22.15.0-bookworm-slim AS runner

# Install Playwright Chromium with comprehensive dependencies (official Marp-CLI approach)
RUN mkdir -p /tmp/marp-cli-chromium && \
    cd /tmp/marp-cli-chromium && \
    npm i playwright@latest && \
    PLAYWRIGHT_BROWSERS_PATH=/usr/local/bin/pw-browsers npx playwright install --with-deps chromium && \
    ln -s $(find /usr/local/bin/pw-browsers -name "chrome" -executable | head -n 1) /usr/local/bin/chrome && \
    rm -rf /tmp/marp-cli-chromium

# Install runtime dependencies with comprehensive Japanese font support
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    dumb-init \
    openssl \
    gosu \
    fonts-liberation \
    fonts-noto-cjk \
    fonts-noto-cjk-extra \
    fonts-noto-color-emoji \
    fonts-dejavu-core \
    locales \
    fontconfig \
    && echo "ja_JP.UTF-8 UTF-8" >> /etc/locale.gen \
    && locale-gen ja_JP.UTF-8 \
    && fc-cache -fv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /usr/share/man/* /usr/share/doc/* /var/cache/apt/*

# Create non-root user with home directory
RUN groupadd --system --gid 1001 nodejs \
    && useradd --system --uid 1001 --gid nodejs --create-home nextjs \
    && mkdir -p /home/nextjs/.cache /home/nextjs/.local \
    && chown -R nextjs:nodejs /home/nextjs

# Working directory
WORKDIR /home/nextjs/app

# Install production dependencies only
COPY package*.json ./
RUN npm ci --only=production --no-audit --no-fund --no-optional \
    && npm cache clean --force

# Generate Prisma client
COPY --chown=nextjs:nodejs prisma ./prisma/
RUN npx prisma generate && rm -rf /tmp/*

# Copy build artifacts
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --chown=nextjs:nodejs src ./src
COPY --chown=nextjs:nodejs next.config.mjs tsconfig.json postcss.config.mjs ./
COPY --chown=nextjs:nodejs .env.docker ./.env

# Create directories and set permissions
RUN mkdir -p uploads data \
    && chown -R nextjs:nodejs uploads data \
    && chmod 755 uploads data

# Environment variables with Japanese locale and font support
ENV LANG=ja_JP.UTF-8 \
    LC_ALL=ja_JP.UTF-8 \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/local/bin/chrome \
    CHROME_PATH=/usr/local/bin/chrome \
    PUPPETEER_CACHE_DIR=/home/nextjs/.cache \
    PUPPETEER_ARGS="--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --font-render-hinting=none --disable-font-subpixel-positioning --force-device-scale-factor=1 --disable-features=VizDisplayCompositor --lang=ja --accept-lang=ja-JP,ja" \
    NODE_OPTIONS="--max-old-space-size=1024"

# Create startup script with font verification
RUN echo '#!/bin/bash' > start.sh \
    && echo 'set -e' >> start.sh \
    && echo 'echo "Starting Marp Web Editor (Production-Fix)..."' >> start.sh \
    && echo 'echo "Chromium path: $CHROME_PATH"' >> start.sh \
    && echo 'echo "Japanese font: $(fc-match \"sans-serif:lang=ja\" 2>/dev/null || echo \"Not found\")"' >> start.sh \
    && echo 'mkdir -p data' >> start.sh \
    && echo 'if ! npx prisma db ping > /dev/null 2>&1; then' >> start.sh \
    && echo '  echo "Warning: Database connection failed, initializing..."' >> start.sh \
    && echo '  npx prisma db push --accept-data-loss' >> start.sh \
    && echo 'fi' >> start.sh \
    && echo 'echo "Application ready"' >> start.sh \
    && echo 'exec npm start' >> start.sh \
    && chmod +x start.sh \
    && chown nextjs:nodejs start.sh

# Switch to non-root user
USER nextjs

EXPOSE 3000

ENTRYPOINT ["dumb-init", "--"]
CMD ["./start.sh"]
